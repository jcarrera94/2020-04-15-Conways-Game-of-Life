{"version":3,"sources":["components/controls.js","App.js","serviceWorker.js","index.js"],"names":["styledControls","display","flexWrap","justifyContent","width","Controls","setGrid","useState","rows","setRows","cols","setCols","style","onChange","value","target","type","name","onClick","neighborLocations","App","grid","running","setRunning","speed","runningRef","useRef","current","runSimulation","useCallback","produce","gridCopy","i","console","log","k","neighbors","forEach","x","y","newI","newK","setTimeout","className","numRows","numCols","Array","from","length","map","fill","gridTemplateColumns","col","key","newGrid","height","backgroundColor","undefined","border","marginTop","marginBottom","Date","getFullYear","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2ba6c885.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nfunction Controls({ setGrid }) {\n\n  const [rows, setRows] = useState(0);\n  const [cols, setCols] = useState(0);\n\n  return (\n    <div style={styledControls}>\n      <label>\n        Rows:\n        <input onChange={({target: {value}}) => setRows(value)} type=\"number\" name=\"rows\" />\n      </label>\n      <label>\n        Columns:\n        <input onChange={({target: {value}}) => setCols(value)} type=\"number\" name=\"cols\" />\n      </label>\n      <button onClick={() => setGrid(rows, cols)}>Set Grid</button>\n    </div>\n  )\n}\n\nexport const styledControls = {\n  display: 'flex',\n  flexWrap: 'wrap',\n  justifyContent: 'space-evenly',\n  width: '45%',\n}\n\nexport default Controls\n","import React, { useState, useCallback, useRef } from 'react';\nimport Controls from './components/controls';\nimport produce from 'immer';\nimport './App.css';\n\nconst neighborLocations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0]\n];\n\nfunction App() {\n\n  const [grid, setGrid] = useState();\n  const [cols, setCols] = useState();\n  const [rows, setRows] = useState();\n  const [running, setRunning] = useState(false);\n  const [speed, setSpeed] = useState(1000)\n\n  const generateEmptyGrid = (numRows, numCols) => {\n    const grid = Array.from({ length: numRows }).map(() => Array.from({ length: numCols }).fill(0))\n    setRows(numRows);\n    setCols(numCols);\n    setGrid(grid);\n  }\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n    setGrid(grid => {\n      return produce(grid, gridCopy => {\n        for (let i = 0; i < rows; i++) {\n          console.log('$$$$$', grid[i]);\n          for (let k = 0; k < cols; k++) {\n            let neighbors = 0;\n            neighborLocations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              if (newI >= 0 && newI < rows && newK >= 0 && newK < cols) {\n                neighbors += grid[newI][newK];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (grid[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n\n    setTimeout(runSimulation, speed);\n  }, [grid]);\n\n\n\n  return (\n    <div className=\"App\">\n      <h1>Welcome to Conway's way of life</h1>\n      <Controls setGrid={generateEmptyGrid} />\n      <br/>\n      <button onClick={() => {\n        setRunning(!running);\n        if (!running) {\n          runningRef.current = true;\n          runSimulation();\n        }\n      }}>\n        {running ? \"stop\" : \"start\"}\n      </button>\n      <br/>\n      {!grid && <p>Select a grid please</p>}\n      {grid && <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${cols}, 20px)`\n        }}>\n        {grid.map((rows, i) =>\n          rows.map((col, k) => (\n            <div\n              key={`${i}-${k}`}\n              onClick={() => {\n                const newGrid = produce(grid, gridCopy => {\n                  gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: grid[i][k] ? \"#61dafb\" : undefined,\n                border: \"solid 1px #61dafb\"\n              }}\n            />\n          ))\n        )}\n      </div>}\n      <footer style={{marginTop: '2em', marginBottom: '1em'}}>\n        <small>Created by Juan Carrera, Â© {new Date().getFullYear()}</small>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}